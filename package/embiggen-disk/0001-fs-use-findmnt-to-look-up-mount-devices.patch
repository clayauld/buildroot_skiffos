From 123dc14118204eb2ed493b0ac2f23b3c59579f13 Mon Sep 17 00:00:00 2001
From: Christian Stewart <christian@paral.in>
Date: Thu, 5 May 2022 03:11:47 -0700
Subject: [PATCH] fs: use findmnt to look up mount devices

findmnt from util-linux tries harder to search for the base path for /dev/root
among other differences. use the JSON output mode to determine the filesystem
type and device for a mount point.

Signed-off-by: Christian Stewart <christian@paral.in>
---
 findmnt/findmnt.go        |  17 ++
 findmnt/findmnt_ffjson.go | 508 ++++++++++++++++++++++++++++++++++++++
 fs.go                     |  50 +++-
 go.mod                    |   1 +
 go.sum                    |   2 +
 5 files changed, 575 insertions(+), 3 deletions(-)
 create mode 100644 findmnt/findmnt.go
 create mode 100644 findmnt/findmnt_ffjson.go

diff --git a/findmnt/findmnt.go b/findmnt/findmnt.go
new file mode 100644
index 0000000..500179d
--- /dev/null
+++ b/findmnt/findmnt.go
@@ -0,0 +1,17 @@
+//go:generate ffjson $GOFILE
+
+package findmnt
+
+// Output is the output from findmnt.
+type Output struct {
+	// Filesystems is the list of found filesystems.
+	Filesystems []Filesystem `json:"filesystems"`
+}
+
+// Filesystem is the filesystem output from findmnt.
+type Filesystem struct {
+	// Fstype is the filesystem type.
+	Fstype string `json:"fstype"`
+	// Source is the filesystem source path.
+	Source string `json:"source"`
+}
diff --git a/findmnt/findmnt_ffjson.go b/findmnt/findmnt_ffjson.go
new file mode 100644
index 0000000..6829fea
--- /dev/null
+++ b/findmnt/findmnt_ffjson.go
@@ -0,0 +1,508 @@
+// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
+// source: findmnt.go
+
+package findmnt
+
+import (
+	"bytes"
+	"fmt"
+	fflib "github.com/pquerna/ffjson/fflib/v1"
+)
+
+// MarshalJSON marshal bytes to json - template
+func (j *Filesystem) MarshalJSON() ([]byte, error) {
+	var buf fflib.Buffer
+	if j == nil {
+		buf.WriteString("null")
+		return buf.Bytes(), nil
+	}
+	err := j.MarshalJSONBuf(&buf)
+	if err != nil {
+		return nil, err
+	}
+	return buf.Bytes(), nil
+}
+
+// MarshalJSONBuf marshal buff to json - template
+func (j *Filesystem) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
+	if j == nil {
+		buf.WriteString("null")
+		return nil
+	}
+	var err error
+	var obj []byte
+	_ = obj
+	_ = err
+	buf.WriteString(`{"fstype":`)
+	fflib.WriteJsonString(buf, string(j.Fstype))
+	buf.WriteString(`,"source":`)
+	fflib.WriteJsonString(buf, string(j.Source))
+	buf.WriteByte('}')
+	return nil
+}
+
+const (
+	ffjtFilesystembase = iota
+	ffjtFilesystemnosuchkey
+
+	ffjtFilesystemFstype
+
+	ffjtFilesystemSource
+)
+
+var ffjKeyFilesystemFstype = []byte("fstype")
+
+var ffjKeyFilesystemSource = []byte("source")
+
+// UnmarshalJSON umarshall json - template of ffjson
+func (j *Filesystem) UnmarshalJSON(input []byte) error {
+	fs := fflib.NewFFLexer(input)
+	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
+}
+
+// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
+func (j *Filesystem) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
+	var err error
+	currentKey := ffjtFilesystembase
+	_ = currentKey
+	tok := fflib.FFTok_init
+	wantedTok := fflib.FFTok_init
+
+mainparse:
+	for {
+		tok = fs.Scan()
+		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
+		if tok == fflib.FFTok_error {
+			goto tokerror
+		}
+
+		switch state {
+
+		case fflib.FFParse_map_start:
+			if tok != fflib.FFTok_left_bracket {
+				wantedTok = fflib.FFTok_left_bracket
+				goto wrongtokenerror
+			}
+			state = fflib.FFParse_want_key
+			continue
+
+		case fflib.FFParse_after_value:
+			if tok == fflib.FFTok_comma {
+				state = fflib.FFParse_want_key
+			} else if tok == fflib.FFTok_right_bracket {
+				goto done
+			} else {
+				wantedTok = fflib.FFTok_comma
+				goto wrongtokenerror
+			}
+
+		case fflib.FFParse_want_key:
+			// json {} ended. goto exit. woo.
+			if tok == fflib.FFTok_right_bracket {
+				goto done
+			}
+			if tok != fflib.FFTok_string {
+				wantedTok = fflib.FFTok_string
+				goto wrongtokenerror
+			}
+
+			kn := fs.Output.Bytes()
+			if len(kn) <= 0 {
+				// "" case. hrm.
+				currentKey = ffjtFilesystemnosuchkey
+				state = fflib.FFParse_want_colon
+				goto mainparse
+			} else {
+				switch kn[0] {
+
+				case 'f':
+
+					if bytes.Equal(ffjKeyFilesystemFstype, kn) {
+						currentKey = ffjtFilesystemFstype
+						state = fflib.FFParse_want_colon
+						goto mainparse
+					}
+
+				case 's':
+
+					if bytes.Equal(ffjKeyFilesystemSource, kn) {
+						currentKey = ffjtFilesystemSource
+						state = fflib.FFParse_want_colon
+						goto mainparse
+					}
+
+				}
+
+				if fflib.EqualFoldRight(ffjKeyFilesystemSource, kn) {
+					currentKey = ffjtFilesystemSource
+					state = fflib.FFParse_want_colon
+					goto mainparse
+				}
+
+				if fflib.EqualFoldRight(ffjKeyFilesystemFstype, kn) {
+					currentKey = ffjtFilesystemFstype
+					state = fflib.FFParse_want_colon
+					goto mainparse
+				}
+
+				currentKey = ffjtFilesystemnosuchkey
+				state = fflib.FFParse_want_colon
+				goto mainparse
+			}
+
+		case fflib.FFParse_want_colon:
+			if tok != fflib.FFTok_colon {
+				wantedTok = fflib.FFTok_colon
+				goto wrongtokenerror
+			}
+			state = fflib.FFParse_want_value
+			continue
+		case fflib.FFParse_want_value:
+
+			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
+				switch currentKey {
+
+				case ffjtFilesystemFstype:
+					goto handle_Fstype
+
+				case ffjtFilesystemSource:
+					goto handle_Source
+
+				case ffjtFilesystemnosuchkey:
+					err = fs.SkipField(tok)
+					if err != nil {
+						return fs.WrapErr(err)
+					}
+					state = fflib.FFParse_after_value
+					goto mainparse
+				}
+			} else {
+				goto wantedvalue
+			}
+		}
+	}
+
+handle_Fstype:
+
+	/* handler: j.Fstype type=string kind=string quoted=false*/
+
+	{
+
+		{
+			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
+				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
+			}
+		}
+
+		if tok == fflib.FFTok_null {
+
+		} else {
+
+			outBuf := fs.Output.Bytes()
+
+			j.Fstype = string(string(outBuf))
+
+		}
+	}
+
+	state = fflib.FFParse_after_value
+	goto mainparse
+
+handle_Source:
+
+	/* handler: j.Source type=string kind=string quoted=false*/
+
+	{
+
+		{
+			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
+				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
+			}
+		}
+
+		if tok == fflib.FFTok_null {
+
+		} else {
+
+			outBuf := fs.Output.Bytes()
+
+			j.Source = string(string(outBuf))
+
+		}
+	}
+
+	state = fflib.FFParse_after_value
+	goto mainparse
+
+wantedvalue:
+	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
+wrongtokenerror:
+	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
+tokerror:
+	if fs.BigError != nil {
+		return fs.WrapErr(fs.BigError)
+	}
+	err = fs.Error.ToError()
+	if err != nil {
+		return fs.WrapErr(err)
+	}
+	panic("ffjson-generated: unreachable, please report bug.")
+done:
+
+	return nil
+}
+
+// MarshalJSON marshal bytes to json - template
+func (j *Output) MarshalJSON() ([]byte, error) {
+	var buf fflib.Buffer
+	if j == nil {
+		buf.WriteString("null")
+		return buf.Bytes(), nil
+	}
+	err := j.MarshalJSONBuf(&buf)
+	if err != nil {
+		return nil, err
+	}
+	return buf.Bytes(), nil
+}
+
+// MarshalJSONBuf marshal buff to json - template
+func (j *Output) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
+	if j == nil {
+		buf.WriteString("null")
+		return nil
+	}
+	var err error
+	var obj []byte
+	_ = obj
+	_ = err
+	buf.WriteString(`{"filesystems":`)
+	if j.Filesystems != nil {
+		buf.WriteString(`[`)
+		for i, v := range j.Filesystems {
+			if i != 0 {
+				buf.WriteString(`,`)
+			}
+
+			{
+
+				err = v.MarshalJSONBuf(buf)
+				if err != nil {
+					return err
+				}
+
+			}
+		}
+		buf.WriteString(`]`)
+	} else {
+		buf.WriteString(`null`)
+	}
+	buf.WriteByte('}')
+	return nil
+}
+
+const (
+	ffjtOutputbase = iota
+	ffjtOutputnosuchkey
+
+	ffjtOutputFilesystems
+)
+
+var ffjKeyOutputFilesystems = []byte("filesystems")
+
+// UnmarshalJSON umarshall json - template of ffjson
+func (j *Output) UnmarshalJSON(input []byte) error {
+	fs := fflib.NewFFLexer(input)
+	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
+}
+
+// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
+func (j *Output) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
+	var err error
+	currentKey := ffjtOutputbase
+	_ = currentKey
+	tok := fflib.FFTok_init
+	wantedTok := fflib.FFTok_init
+
+mainparse:
+	for {
+		tok = fs.Scan()
+		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
+		if tok == fflib.FFTok_error {
+			goto tokerror
+		}
+
+		switch state {
+
+		case fflib.FFParse_map_start:
+			if tok != fflib.FFTok_left_bracket {
+				wantedTok = fflib.FFTok_left_bracket
+				goto wrongtokenerror
+			}
+			state = fflib.FFParse_want_key
+			continue
+
+		case fflib.FFParse_after_value:
+			if tok == fflib.FFTok_comma {
+				state = fflib.FFParse_want_key
+			} else if tok == fflib.FFTok_right_bracket {
+				goto done
+			} else {
+				wantedTok = fflib.FFTok_comma
+				goto wrongtokenerror
+			}
+
+		case fflib.FFParse_want_key:
+			// json {} ended. goto exit. woo.
+			if tok == fflib.FFTok_right_bracket {
+				goto done
+			}
+			if tok != fflib.FFTok_string {
+				wantedTok = fflib.FFTok_string
+				goto wrongtokenerror
+			}
+
+			kn := fs.Output.Bytes()
+			if len(kn) <= 0 {
+				// "" case. hrm.
+				currentKey = ffjtOutputnosuchkey
+				state = fflib.FFParse_want_colon
+				goto mainparse
+			} else {
+				switch kn[0] {
+
+				case 'f':
+
+					if bytes.Equal(ffjKeyOutputFilesystems, kn) {
+						currentKey = ffjtOutputFilesystems
+						state = fflib.FFParse_want_colon
+						goto mainparse
+					}
+
+				}
+
+				if fflib.EqualFoldRight(ffjKeyOutputFilesystems, kn) {
+					currentKey = ffjtOutputFilesystems
+					state = fflib.FFParse_want_colon
+					goto mainparse
+				}
+
+				currentKey = ffjtOutputnosuchkey
+				state = fflib.FFParse_want_colon
+				goto mainparse
+			}
+
+		case fflib.FFParse_want_colon:
+			if tok != fflib.FFTok_colon {
+				wantedTok = fflib.FFTok_colon
+				goto wrongtokenerror
+			}
+			state = fflib.FFParse_want_value
+			continue
+		case fflib.FFParse_want_value:
+
+			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
+				switch currentKey {
+
+				case ffjtOutputFilesystems:
+					goto handle_Filesystems
+
+				case ffjtOutputnosuchkey:
+					err = fs.SkipField(tok)
+					if err != nil {
+						return fs.WrapErr(err)
+					}
+					state = fflib.FFParse_after_value
+					goto mainparse
+				}
+			} else {
+				goto wantedvalue
+			}
+		}
+	}
+
+handle_Filesystems:
+
+	/* handler: j.Filesystems type=[]findmnt.Filesystem kind=slice quoted=false*/
+
+	{
+
+		{
+			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
+				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
+			}
+		}
+
+		if tok == fflib.FFTok_null {
+			j.Filesystems = nil
+		} else {
+
+			j.Filesystems = []Filesystem{}
+
+			wantVal := true
+
+			for {
+
+				var tmpJFilesystems Filesystem
+
+				tok = fs.Scan()
+				if tok == fflib.FFTok_error {
+					goto tokerror
+				}
+				if tok == fflib.FFTok_right_brace {
+					break
+				}
+
+				if tok == fflib.FFTok_comma {
+					if wantVal == true {
+						// TODO(pquerna): this isn't an ideal error message, this handles
+						// things like [,,,] as an array value.
+						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
+					}
+					continue
+				} else {
+					wantVal = true
+				}
+
+				/* handler: tmpJFilesystems type=findmnt.Filesystem kind=struct quoted=false*/
+
+				{
+					if tok == fflib.FFTok_null {
+
+					} else {
+
+						err = tmpJFilesystems.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
+						if err != nil {
+							return err
+						}
+					}
+					state = fflib.FFParse_after_value
+				}
+
+				j.Filesystems = append(j.Filesystems, tmpJFilesystems)
+
+				wantVal = false
+			}
+		}
+	}
+
+	state = fflib.FFParse_after_value
+	goto mainparse
+
+wantedvalue:
+	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
+wrongtokenerror:
+	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
+tokerror:
+	if fs.BigError != nil {
+		return fs.WrapErr(fs.BigError)
+	}
+	err = fs.Error.ToError()
+	if err != nil {
+		return fs.WrapErr(err)
+	}
+	panic("ffjson-generated: unreachable, please report bug.")
+done:
+
+	return nil
+}
diff --git a/fs.go b/fs.go
index c2f36c9..bed7395 100644
--- a/fs.go
+++ b/fs.go
@@ -28,6 +28,7 @@ import (
 	"strings"
 	"syscall"
 
+	"github.com/bradfitz/embiggen-disk/findmnt"
 	"golang.org/x/sys/unix"
 )
 
@@ -110,10 +111,16 @@ type fsStat struct {
 }
 
 func statFS(mnt string) (fs fsStat, err error) {
+	fs, err = statFSFindmnt(mnt)
+	if err != nil || fs.dev != "" {
+		return fs, err
+	}
+
 	err = unix.Statfs(mnt, &fs.statfs)
 	if err != nil {
 		return
 	}
+
 	mounts, err := ioutil.ReadFile("/proc/mounts")
 	if err != nil {
 		return
@@ -129,9 +136,6 @@ func statFS(mnt string) (fs fsStat, err error) {
 			continue
 		}
 		if f[1] == mnt {
-			fs.mnt = mnt
-			fs.dev = f[0]
-			fs.fstype = f[2]
 			if fs.dev == "/dev/root" {
 				dev, err := findDevRoot()
 				if err != nil {
@@ -139,12 +143,52 @@ func statFS(mnt string) (fs fsStat, err error) {
 				}
 				fs.dev = dev
 			}
+			fs.mnt = mnt
+			fs.dev = f[0]
+			fs.fstype = f[2]
 			return fs, err
 		}
 	}
+
 	return fs, errors.New("mount point not found")
 }
 
+// statFSFindmnt uses findmnt to stat the filesystem.
+func statFSFindmnt(mnt string) (fs fsStat, err error) {
+	cmd := exec.Command(
+		"findmnt",
+		"--noheadings",
+		"--output", "FSTYPE,SOURCE",
+		"-J",
+		mnt,
+	)
+	out, err := cmd.Output()
+	if err != nil {
+		return fs, fmt.Errorf("error running findmnt: %v", execErrDetail(err))
+	}
+
+	var output findmnt.Output
+	if len(out) > 2 {
+		err = (&output).UnmarshalJSON(out)
+		if err != nil {
+			return fs, fmt.Errorf("error parsing findmnt output: %v", err)
+		}
+	}
+
+	fsInfo := &output.Filesystems[0]
+	if len(fsInfo.Fstype) != 0 {
+		fs.mnt = mnt
+		fs.fstype = fsInfo.Fstype
+		fs.dev = fsInfo.Source
+	}
+
+	if fs.dev == "" {
+		return fs, errors.New("mount point not found")
+	}
+
+	return fs, nil
+}
+
 // findDevRoot finds which block device (e.g. "/dev/nvme0n1p1") patches the device number of /dev/root.
 func findDevRoot() (string, error) {
 	fis, err := ioutil.ReadDir("/dev")
diff --git a/go.mod b/go.mod
index 7890220..cd3bb45 100644
--- a/go.mod
+++ b/go.mod
@@ -3,6 +3,7 @@ module github.com/bradfitz/embiggen-disk
 go 1.15
 
 require (
+	github.com/pquerna/ffjson v0.0.0-20190930134022-aa0246cd15f7
 	github.com/u-root/u-root v0.0.0-20180806213625-12f9029297cf
 	golang.org/x/sys v0.0.0-20201112073958-5cba982894dd
 )
diff --git a/go.sum b/go.sum
index 68c1ec2..a864b5e 100644
--- a/go.sum
+++ b/go.sum
@@ -1,3 +1,5 @@
+github.com/pquerna/ffjson v0.0.0-20190930134022-aa0246cd15f7 h1:xoIK0ctDddBMnc74udxJYBqlo9Ylnsp1waqjLsnef20=
+github.com/pquerna/ffjson v0.0.0-20190930134022-aa0246cd15f7/go.mod h1:YARuvh7BUWHNhzDq2OM5tzR2RiCcN2D7sapiKyCel/M=
 github.com/u-root/u-root v0.0.0-20180806213625-12f9029297cf h1:EEvaBfp7JfttSDsqDibrSFPXga9xuthzkVt9IfatI2w=
 github.com/u-root/u-root v0.0.0-20180806213625-12f9029297cf/go.mod h1:RYkpo8pTHrNjW08opNd/U6p/RJE7K0D8fXO0d47+3YY=
 golang.org/x/sys v0.0.0-20201112073958-5cba982894dd h1:5CtCZbICpIOFdgO940moixOPjc0178IU44m4EjOO5IY=
-- 
2.35.1

